数组和指针（2）
输入字符串时，可以使用其他分隔符作为字符串结束的标志（例如逗号分号），将分隔符作为getline的第三个参数即可，例如：getline(cin,s2,',');
vector对象的定义
vector<元素类型>数组对象名(数组长度)；
eg:vector<int>arr(5);
建立大小为5的int数组
对数组元素的引用
获得数组长度：用size函数 数组对象名.size()

二维数组
定义：类型说明符 数组名[常量行表达式][常量列表达式];
eg:int a[3][4]；三行四列
二维数组可以视为一张表格 横向行纵向列
定义式行号在前列号在后
初始化：方法一：将所有数据写在一个｛｝内，按顺序赋值
eg：int a[3][4]={1,2,3,4,5,6,7,8,9,10,11,12};
方法二：俺：分行给二维数组赋初值
int a[3][4]={{1,2,3,4},{5,6,7,8},{9,10,11,12}};
此种方法是将二维数组看成多个一维数组的集合
c＋＋高维数组在内存中以高位优先的方式存放
matrix[i][j]=matrix[0][0]+(i*4+j)*4;
二维数组的访问：matrix[i][j]
初始化可以不完全，只对部分元素赋初值
－－－－－－－－－－－－－－－－－－－－变量、指针－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－
内存是按地址访问的，所以内存地址是一个很重要的值，实际使用时是用十六进制表示的
可以把地址值放在另一个变量中，用于存放这个地址的变量称为指针类型变量，简称指针变量。
指针是专门用来存储内存空间地址的一种变量。
指针类型变量：能够存放对象地址的变量
定义形式：类型＊标识符;
eg：char* s //s是指向字符对象的指针
double* dptr//dptr是指向浮点对象的指针
int a = 4656;
int* p;
p= &a;
cout<<*p; //输出a的值4656
cout <<p; //输出a的地址13FF49H
＆：取地址运算符
＊：间接引用运算符
＊p：访问指针p所指向的内存的数据
地址中存放的数据类型与指针类型必须相符
不能给指针变量随意赋一个地址值，只能取一个已经分配了内存空间的变量的地址赋给指针变量
可以赋值为整数0，表示空指针
允许声明void类型的指针，该指针可以被赋予任何类型对象的地址
＊＊＊＊指针变量必须赋一个地址值
＆取地址运算符 作用于内存中一个可寻址数据，操作结果是获得该数据的地址；
·





























