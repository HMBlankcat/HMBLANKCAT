#include <iostream>
using namespace std;
int main(){
    /*1.数据类型 数组名[数组长度];
    2.数据类型 数组名[数据长度]={值1,值2,...};
    3.数据类型 数组名[]={值1,值2...};*/
    /*特点:1.放在一块连续的内存空间中
    2.数组中每个元素都是相同数据类型*/
    // int arr[5] ;
    // arr[0] = 10;
    // arr[1] = 20;
    // arr[2] = 30;
    // arr[3] = 40;
    // arr[4] = 50;
    //访问数据元素
    // cout << arr[0] << endl;
    // int arr2[5]={10,20,30,40,50};
    // cout << arr2[0]<< endl;
    //如果初始化数据的时候没有全部填写,会用0填补剩余数据
    // int arr3[]={90,80,70,60,50,40,30,20,10};
    // //定义数组的时候必须有初始长度
    // for (int i = 0; i < 9; i++)
    // {
    //     cout << arr3[i] <<endl;

    // }
//数组命名和变量组命名规则相同
//数组中下标索引从0开始
//----------------------------------------------------------------
    //一维数组名称用途:1.可以统计整个数组在内存中的长度2.可以获取数组在内存中的首地址
//     int arr[5]={1,2,3,4,5};
//     cout << sizeof(arr) << endl;
//     cout <<"每个元素所占用的内存空间为" << sizeof(arr[0]) << endl;
//     cout <<"数组中元素个数为:" << sizeof(arr) / sizeof(arr[0]) << endl;
//     //2.可以通过数组名查看数组首地址
//     cout << "数组的首地址为:" << arr <<endl;
//     cout << "数组中第一个元素地址为:" << (long long)&arr[0] << endl;
// //数组名是常量,不可以进行赋值操作
//----------------------------------------------------------------
//案例 五只小猪称体重
    // int arr[5] = {300,350,200,400,250};
    // int max = 0;
    // //访问数组中每个元素,如果这个元素比我认定的最大值要大,更新最大值
    // for (int i = 0; i < 5;i++)
    // {
    //     if ((arr[i]) > max)
    //     {
    //         max = arr[i];
    //     }
    // }
    // cout << "最终的小猪体重为:" <<max <<endl;
//----------------------------------------------------------------
//案例2 数组元素逆置
    /*int arr[5] = {1,3,2,5,4};
    cout<<"数组逆置前:" << endl;
    for (int i = 0; i < 5; i++)
    {
        cout << arr[i] <<endl;
    }
    int start = 0;//起始下标
    int end = sizeof(arr) / sizeof(arr[0]) -1;//结束下标
    while(start < end)
    {
        int temp = arr[start];
        arr[start] = arr[end];
        arr[end] = temp;//实现元素互换
        start++;
        end--;
    }
    
    cout<<"数组逆置后:" << endl;
    for (int i = 0; i < 5; i++)
    {
        cout << arr[i] <<endl;
    }*/
//----------------------------------------------------------------
//冒泡排序 最常用的排序算法,对数组内元素进行排序
/*1.比较相邻的元素.如果第一个比第二个大,就交换他们两个
2.对每一对相邻元素做同样的工作,执行完毕后找到第一个最大值
3.重复以上的步骤,每次比较次数-1,until不需要比较*/
    /*int arr[9]={4,2,8,0,5,7,1,3,9};//利用冒泡排序实现升序序列
    cout<< "排序前" <<endl;
    for (int i = 0;i < 9 ;i++ )
    {
        cout << arr[i] << endl;
    }
    cout << endl;
    //开始冒泡排序 总排序轮数:元素个数-1
    for (int i = 0 ;i < 9-1; i++)
    {
        for (int j = 0;j < 9 - 1; j++)
        {
            if (arr[j] > arr[j+1])
            {
                int temp = arr[j];
                arr[j] = arr[j+1];
                arr[j+1] = temp;

            }
        }
        
    }
    cout<< "排序后" <<endl;
    for (int i = 0;i < 9 ;i++ )
    {
        cout << arr[i] << endl;
    }
    cout << endl;*/
//---------------------------------------------------------------
